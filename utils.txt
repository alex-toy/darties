git rm -r --cached .
git add .
git commit -m ".gitignore is now working"
git push


python3 -m venv .venv


cd /Users/alexei/docs150521/MIAGE/S4/D605/darties
source .venv/bin/activate
conda deactivate


python3 -m pip install -r requirements.txt


docker pull puckel/docker-airflow

docker kill $(docker ps -q)
docker rm $(docker ps --filter=status=exited --filter=status=created -q)
docker rmi $(docker images -a -q)
docker builder prune
docker system prune -a


# from Dockerfile :
docker build -t webserver .
docker run -d --rm -p 8080:8080 -v $(pwd)/airflow:/usr/local/airflow --name airflowserver webserver

airflow will run at : http://localhost:8080
docker exec -it airflowserver bash
pip install xlrd>=1.0.0
pip install openpyxl
pip install requests
pip install beautifulsoup4
pip install lxml
docker stop airflowserver

curl -X "DELETE" http://127.0.0.1:8080/api/experimental/dags/test_dag
curl -X "DELETE" http://127.0.0.1:8080/api/experimental/dags/monthly_initial_dag
curl -X "DELETE" http://127.0.0.1:8080/api/experimental/dags/monthly_global_dag
curl -X "DELETE" http://127.0.0.1:8080/api/experimental/dags/initial_dag
curl -X "DELETE" http://127.0.0.1:8080/api/experimental/dags/global_dag

AIRFLOW CONNECTIONS :

    AWS :
        Conn Id : aws_credentials
        Conn Type : Amazon Web Services
        Login : Access key ID from the S3_USER User credentials
        Password : Secret access key from the S3_USER User credentials

    REDSHIFT :
        Conn Id : redshift
        Conn Type : Postgres
        Host : endpoint of your Redshift cluster, excluding the port at the end
        Schema :  dev
        Login : awsuser
        Password :  password you created when launching your Redshift cluster.
        Port : 5439



### SQL de vérification :

## Dans le modèle étoile 
SELECT famille_produit.lib_famille_produit, temps.lib_mois, temps.annee, ville.lib_ville, sales.vente_objectif
FROM sales 
JOIN temps ON temps.id_temps = sales.id_temps
JOIN ville ON sales.id_ville = ville.id_ville
JOIN famille_produit ON famille_produit.id_famille_produit = sales.id_famille_produit

WHERE 
    famille_produit.lib_famille_produit = 'hifi' AND 
    temps.annee = 2020 AND 
    temps.lib_mois = 'avril' AND 
    ville = 'strasbourg'

limit 10;


## Dans les staging :
SELECT o_avril
FROM staging_v_hifi 
WHERE annee = 2020  AND villes = 'strasbourg'
LIMIT 10;





### Vérifier que pour une ville, une famille de produits donnnée, à une date donnée, 
### il n'y a bien qu'une seule mesure :
select * 
from sales 
join temps on sales.id_temps = temps.id_temps
join ville on sales.id_ville = ville.id_ville
join famille_produit on sales.id_famille_produit = famille_produit.id_famille_produit

where 
	temps.annee = 2020 AND temps.lib_mois = 'janvier' AND
	ville.lib_ville = 'marseille' AND
    famille_produit.id_famille_produit = 1;





### Vérifier que les update mensuels sont corrects :

## dans le modèle étoile :
select ca_reel, vente_reel, marge_reel, famille_produit.lib_famille_produit, temps.annee, temps.lib_mois
from sales 
join temps on sales.id_temps = temps.id_temps
join ville on sales.id_ville = ville.id_ville
join famille_produit on sales.id_famille_produit = famille_produit.id_famille_produit

where 
	temps.annee = 2021 AND 
    temps.lib_mois = 'janvier' AND
	ville.lib_ville = 'marseille';



## dans les staging mensuels :
SELECT 
	staging_monthly_mb_magneto.villes AS villes, 
    staging_monthly_mb_magneto.annee AS annee, 
    staging_monthly_mb_magneto.lib_mois AS lib_mois, 
    
    staging_monthly_mb_magneto.r_mois AS reel_mb_magneto,
    staging_monthly_v_magneto.r_mois AS reel_v_magneto,
    staging_monthly_ca_magneto.r_mois AS reel_ca_magneto,
    
    staging_monthly_mb_hifi.r_mois AS reel_mb_hifi,
    staging_monthly_v_hifi.r_mois AS reel_v_hifi,
    staging_monthly_ca_hifi.r_mois AS reel_ca_hifi,
    
    staging_monthly_mb_fours.r_mois AS reel_mb_fours,
    staging_monthly_v_fours.r_mois AS reel_v_fours,
    staging_monthly_ca_fours.r_mois AS reel_ca_fours

FROM staging_monthly_mb_magneto
JOIN staging_monthly_v_magneto ON staging_monthly_v_magneto.villes =  staging_monthly_mb_magneto.villes
JOIN staging_monthly_ca_magneto ON staging_monthly_ca_magneto.villes =  staging_monthly_mb_magneto.villes
JOIN staging_monthly_ca_hifi ON staging_monthly_ca_hifi.villes =  staging_monthly_mb_magneto.villes
JOIN staging_monthly_v_hifi ON staging_monthly_v_hifi.villes =  staging_monthly_mb_magneto.villes
JOIN staging_monthly_mb_hifi ON staging_monthly_mb_hifi.villes =  staging_monthly_mb_magneto.villes
JOIN staging_monthly_ca_fours ON staging_monthly_ca_fours.villes =  staging_monthly_mb_magneto.villes
JOIN staging_monthly_v_fours ON staging_monthly_v_fours.villes =  staging_monthly_mb_magneto.villes
JOIN staging_monthly_mb_fours ON staging_monthly_mb_fours.villes =  staging_monthly_mb_magneto.villes

WHERE  
	staging_monthly_mb_magneto.villes = 'marseille' AND 
    staging_monthly_mb_magneto.lib_mois = 'janvier' AND 
    staging_monthly_mb_magneto.annee = 2021;


### Vérifier s'il y a des valeurs nulles après que l'update mensuelle a été réalisé
SELECT * 
FROM sales 
WHERE 
	marge_reel IS NULL OR
    vente_reel IS NULL OR
    ca_reel IS NULL;